version: "3.6"
services:
  chainlink:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: integration_chainlink
    restart: on-failure
    ports:
      - "6888:6688"
    depends_on:
      - postgres
      - mock
    secrets:
      - node_password
      - apicredentials
      - keystore
    env_file:
      - ./chainlink.env
    environment:
      - DATABASE_URL=postgresql://chainlink@postgres:5432/chainlink?sslmode=disable
    volumes:
      - "cl:/chainlink"
    networks:
      - integration
  postgres:
    image: postgres
    restart: on-failure
    environment:
      - POSTGRES_MULTIPLE_DATABASES=chainlink,ei
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - "./docker-init-scripts/postgres:/docker-entrypoint-initdb.d"
      - "pg:/var/lib/postgresql/data"
    networks:
      - integration
  mock:
    build:
      context: ../.
      dockerfile: ./integration/mock-client/Dockerfile
    restart: on-failure
    ports:
      - "8081:8080"
      - "8091:8090"
    networks:
      - integration
  external-initiator:
    build:
      context: ../.
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    env_file:
      - ./external_initiator.env
    environment:
      - EI_DATABASEURL=postgresql://ei@postgres:5432/ei?sslmode=disable
      - EI_CHAINLINKURL=http://chainlink:6688/
      - EI_MOCK=true
    command:
      - '{"name":"eth-mock-http","type":"ethereum","url":"http://mock:8080/rpc/eth","refreshInterval":600}'
      - '{"name":"eth-mock-ws","type":"ethereum","url":"ws://mock:8080/ws/eth"}'
      - '{"name":"hmy-mock-http","type":"harmony","url":"http://mock:8080/rpc/hmy","refreshInterval":600}'
      - '{"name":"hmy-mock-ws","type":"harmony","url":"ws://mock:8080/ws/hmy"}'
      - '{"name":"xtz-mock-http","type":"tezos","url":"http://mock:8080/http/xtz"}'
      - '{"name":"ont-mock-http","type":"ontology","url":"http://mock:8080/rpc/ont"}'
      - '{"name":"substrate-mock-ws","type":"substrate","url":"ws://mock:8080/ws/substrate"}'
      - '{"name":"bsc-mock-http","type":"binance-smart-chain","url":"http://mock:8080/rpc/binance-smart-chain","refreshInterval":600}'
      - '{"name":"bsc-mock-ws","type":"binance-smart-chain","url":"ws://mock:8080/ws/binance-smart-chain"}'
      - '{"name":"near-mock-http","type":"near","url":"http://mock:8080/rpc/near","refreshInterval":600}'
      - '{"name":"iotx-mock-grpc","type":"iotex","url":"http://mock:8090","refreshInterval":600}'
      - '{"name":"cfx-mock-http","type":"conflux","url":"http://mock:8080/rpc/cfx","refreshInterval":600}'
      - '{"name":"cfx-mock-ws","type":"conflux","url":"ws://mock:8080/ws/cfx"}'
      - '{"name":"keeper-mock-http","type":"keeper","url":"http://mock:8080/rpc/keeper","refreshInterval":600}'
      - '{"name":"keeper-mock-ws","type":"keeper","url":"ws://mock:8080/ws/keeper"}'
      - '{"name":"birita-mock-http","type":"bsn-irita","url":"http://mock:8080","refreshInterval":600}'
      - '{"name":"klaytn-mock-http","type":"klaytn","url":"http://mock:8080/rpc/klaytn","refreshInterval":600}'
      - '{"name":"klaytn-mock-ws","type":"klaytn","url":"ws://mock:8080/ws/klaytn"}'
    networks:
      - integration
volumes:
  pg:
  cl:
secrets:
  node_password:
    file: ./secrets/password.txt
  apicredentials:
    file: ./secrets/apicredentials
  keystore:
    file: ./secrets/0x9CA9d2D5E04012C9Ed24C0e513C9bfAa4A2dD77f.json
networks:
  integration:
    name: integration
