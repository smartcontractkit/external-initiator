package ethereum

import (
	"encoding/json"
	"fmt"
	"os"
	"reflect"
	"testing"

	"github.com/smartcontractkit/external-initiator/blockchain/common"
	"github.com/smartcontractkit/external-initiator/store"

	eth "github.com/ethereum/go-ethereum/common"
)

var rpcSub = store.Subscription{Job: "1234-rpc", Endpoint: store.Endpoint{Url: "https://example.com"}}
var rpcRunlogManager *runlogManager

func TestMain(m *testing.M) {
	var err error
	rpcRunlogManager, err = CreateRunlogManager(rpcSub)
	if err != nil {
		panic(err)
	}
	os.Exit(m.Run())
}

func TestCreateRunlogManager(t *testing.T) {
	type args struct {
		sub store.Subscription
	}
	tests := []struct {
		name    string
		args    args
		want    *runlogManager
		wantErr bool
	}{
		{
			"creates runlog manager",
			args{rpcSub},
			rpcRunlogManager,
			false,
		},
		{
			"fails with invalid URL scheme",
			args{store.Subscription{Job: "1234-invalid-url", Endpoint: store.Endpoint{Url: "not valid"}}},
			nil,
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := CreateRunlogManager(tt.args.sub)
			if (err != nil) != tt.wantErr {
				t.Errorf("CreateRunlogManager() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if tt.want != nil && got == nil {
				t.Errorf("createManager() got nil")
				return
			}
			if got != nil && tt.want.subscriber.Type() != got.subscriber.Type() {
				t.Errorf("createManager() got Type() = %v, want %v", got.subscriber.Type(), tt.want.subscriber.Type())
			}
		})
	}
}

func Test_parseEthLogResponse(t *testing.T) {
	type args struct {
		result json.RawMessage
	}
	tests := []struct {
		name    string
		args    args
		want    common.RunlogRequest
		wantErr bool
	}{
		{
			"successfully parses oracle request",
			args{[]byte(`{"data":"0x0000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000005663676574783f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d455448267473796d733d5553446470617468635553446574696d65731864","address":"0xFadfF79bA04F169386646a43869B66B39c7E0858","logIndex":"0x0","blockNumber":"0x2","blockHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionIndex":"0x0","topics":["0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65","0x0000000000000000000000000000000000000000000000000000000000000000"]}`)},
			common.RunlogRequest{
				"address":          "0xFadfF79bA04F169386646a43869B66B39c7E0858",
				"dataPrefix":       "0x354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b",
				"functionSelector": "0x4ab0d190",
				"get":              "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD",
				"path":             "USD",
				"times":            float64(100),
			},
			false,
		},
		{
			"fails on removed event",
			args{[]byte(`{"removed":true,"data":"0x0000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000005663676574783f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d455448267473796d733d5553446470617468635553446574696d65731864","address":"0xFadfF79bA04F169386646a43869B66B39c7E0858","logIndex":"0x0","blockNumber":"0x2","blockHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionIndex":"0x0","topics":["0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65","0x0000000000000000000000000000000000000000000000000000000000000000"]}`)},
			common.RunlogRequest{},
			true,
		},
		{
			"fails on invalid data payload",
			args{[]byte(`{"data":"0x00","address":"0xFadfF79bA04F169386646a43869B66B39c7E0858","logIndex":"0x0","blockNumber":"0x2","blockHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionIndex":"0x0","topics":["0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65","0x0000000000000000000000000000000000000000000000000000000000000000"]}`)},
			common.RunlogRequest{},
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := parseEthLogResponse(tt.args.result)
			if (err != nil) != tt.wantErr {
				t.Errorf("parseEthLogResponse() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if err == nil && !reflect.DeepEqual(got, tt.want) {
				t.Errorf("parseEthLogResponse() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_parseEthLogsResponse(t *testing.T) {
	type args struct {
		result json.RawMessage
	}
	tests := []struct {
		name    string
		args    args
		want    []common.RunlogRequest
		wantErr bool
	}{
		{
			"successfully parses single oracle request",
			args{[]byte(`[{"data":"0x0000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000005663676574783f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d455448267473796d733d5553446470617468635553446574696d65731864","address":"0xFadfF79bA04F169386646a43869B66B39c7E0858","logIndex":"0x0","blockNumber":"0x2","blockHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionIndex":"0x0","topics":["0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65","0x0000000000000000000000000000000000000000000000000000000000000000"]}]`)},
			[]common.RunlogRequest{
				{
					"address":          "0xFadfF79bA04F169386646a43869B66B39c7E0858",
					"dataPrefix":       "0x354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b",
					"functionSelector": "0x4ab0d190",
					"get":              "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD",
					"path":             "USD",
					"times":            float64(100),
				},
			},
			false,
		},
		{
			"successfully parses multiple oracle requests",
			args{[]byte(`[{"data":"0x0000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000005663676574783f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d455448267473796d733d5553446470617468635553446574696d65731864","address":"0xFadfF79bA04F169386646a43869B66B39c7E0858","logIndex":"0x0","blockNumber":"0x2","blockHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionIndex":"0x0","topics":["0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65","0x0000000000000000000000000000000000000000000000000000000000000000"]},{"data":"0x0000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000005663676574783f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d455448267473796d733d5553446470617468635553446574696d65731864","address":"0xFadfF79bA04F169386646a43869B66B39c7E0858","logIndex":"0x0","blockNumber":"0x2","blockHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionIndex":"0x0","topics":["0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65","0x0000000000000000000000000000000000000000000000000000000000000000"]}]`)},
			[]common.RunlogRequest{
				{
					"address":          "0xFadfF79bA04F169386646a43869B66B39c7E0858",
					"dataPrefix":       "0x354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b",
					"functionSelector": "0x4ab0d190",
					"get":              "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD",
					"path":             "USD",
					"times":            float64(100),
				},
				{
					"address":          "0xFadfF79bA04F169386646a43869B66B39c7E0858",
					"dataPrefix":       "0x354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b",
					"functionSelector": "0x4ab0d190",
					"get":              "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD",
					"path":             "USD",
					"times":            float64(100),
				},
			},
			false,
		},
		{
			"skips removed events",
			args{[]byte(`[{"removed":true,"data":"0x0000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000005663676574783f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d455448267473796d733d5553446470617468635553446574696d65731864","address":"0xFadfF79bA04F169386646a43869B66B39c7E0858","logIndex":"0x0","blockNumber":"0x2","blockHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionIndex":"0x0","topics":["0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65","0x0000000000000000000000000000000000000000000000000000000000000000"]},{"data":"0x0000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000005663676574783f68747470733a2f2f6d696e2d6170692e63727970746f636f6d706172652e636f6d2f646174612f70726963653f6673796d3d455448267473796d733d5553446470617468635553446574696d65731864","address":"0xFadfF79bA04F169386646a43869B66B39c7E0858","logIndex":"0x0","blockNumber":"0x2","blockHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionHash":"0xabc0000000000000000000000000000000000000000000000000000000000000","transactionIndex":"0x0","topics":["0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65","0x0000000000000000000000000000000000000000000000000000000000000000"]}]`)},
			[]common.RunlogRequest{
				{
					"address":          "0xFadfF79bA04F169386646a43869B66B39c7E0858",
					"dataPrefix":       "0x354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b",
					"functionSelector": "0x4ab0d190",
					"get":              "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD",
					"path":             "USD",
					"times":            float64(100),
				},
			},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := parseEthLogsResponse(tt.args.result)
			if (err != nil) != tt.wantErr {
				t.Errorf("parseEthLogsResponse() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("parseEthLogsResponse() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_runlogManager_CreateJobRun(t *testing.T) {
	tests := []struct {
		name    string
		request common.RunlogRequest
		want    map[string]interface{}
	}{
		{
			"sends the same request params",
			common.RunlogRequest{
				"address":          "0xFadfF79bA04F169386646a43869B66B39c7E0858",
				"dataPrefix":       "0x354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b",
				"functionSelector": "0x4ab0d190",
				"get":              "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD",
				"path":             "USD",
				"times":            float64(100),
			},
			map[string]interface{}{
				"address":          "0xFadfF79bA04F169386646a43869B66B39c7E0858",
				"dataPrefix":       "0x354f99e2ac319d0d1ff8975c41c72bf347fb69a4874e2641bd19c32e09eb88b80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007d0965224facd7156df0c9a1adf3a94118026eeb92cdaaf300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ef1cd6b",
				"functionSelector": "0x4ab0d190",
				"get":              "https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD",
				"path":             "USD",
				"times":            float64(100),
			},
		},
		{
			"doesn't add more data",
			common.RunlogRequest{},
			map[string]interface{}{},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := rpcRunlogManager.CreateJobRun(tt.request); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("CreateJobRun() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_runlogManager_getFilterQuery(t *testing.T) {
	var emptyAddressSet []eth.Address

	type args struct {
		fromBlock string
	}
	tests := []struct {
		name    string
		args    args
		want    interface{}
		wantErr bool
	}{
		{
			"creates a basic filter query with the from block set",
			args{"0x12"},
			map[string]interface{}{
				"address":   emptyAddressSet, // Cannot be defined inline, as it will be treated as different values
				"fromBlock": "0x12",
				"toBlock":   "latest",
				"topics": [][]eth.Hash{
					{eth.HexToHash("0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65")},
					{eth.HexToHash("0x313233342d727063000000000000000000000000000000000000000000000000")},
				},
			},
			false,
		},
		{
			"uses 'latest' if no block number is set",
			args{""},
			map[string]interface{}{
				"address":   emptyAddressSet, // Cannot be defined inline, as it will be treated as different values
				"fromBlock": "latest",
				"toBlock":   "latest",
				"topics": [][]eth.Hash{
					{eth.HexToHash("0xd8d7ecc4800d25fa53ce0372f13a416d98907a7ef3d8d3bdd79cf4fe75529c65")},
					{eth.HexToHash("0x313233342d727063000000000000000000000000000000000000000000000000")},
				},
			},
			false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := rpcRunlogManager.getFilterQuery(tt.args.fromBlock)
			if (err != nil) != tt.wantErr {
				t.Errorf("getFilterQuery() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				for k, v := range tt.want.(map[string]interface{}) {
					fmt.Println(k)
					fmt.Println(reflect.TypeOf(v), reflect.TypeOf(got[k]))
					fmt.Println(reflect.DeepEqual(v, got[k]))
				}
				t.Errorf("getFilterQuery() got = %v, want %v", got, tt.want)
			}
		})
	}
}
